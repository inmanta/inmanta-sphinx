pipeline {
  agent any
  options {
    disableConcurrentBuilds()
  }

  triggers {
    cron(BRANCH_NAME == "master" ? "H H(2-5) * * *": "")
  }

  environment {
    INMANTA_TEST_ENV="${env.WORKSPACE}/env"
    PIP_INDEX_URL="https://artifacts.internal.inmanta.com/inmanta/dev"
    // don't require product package (inmanta or inmanta-service-orchestrator)
    INMANTA_DONT_DISCOVER_VERSION=1
  }

  stages {
    stage("Checkout source") {
      steps {
        deleteDir()
        dir("inmanta-sphinx") {
          checkout scm
        }
      }
    }

    stage("Matrix") {
      matrix {
        axes {
          axis {
            name "CORE_BRANCH"
            values "master", "iso6", "iso7"
          }
          axis {
            name "MODULES_V2"
            values "true", "false"
          }
        }
        options {
          lock("inmanta-sphinx-sequential-matrix/${BRANCH_NAME}")
        }
        stages {
          stage("check out inmanta-core") {
            steps {
              dir("inmanta-core") {
                deleteDir()
                script { // A full checkout is required for the get-python-version-for-checkout command
                  git(
                    branch: env.CORE_BRANCH,
                    url: "https://github.com/inmanta/inmanta-core.git",
                    credentialsId: 'inmantaci-token-on-github',
                  )
                  withCredentials([gitUsernamePassword(credentialsId: 'inmantaci-token-on-github')]) {
                    sh 'git fetch'
                  }
                }
              }
            }
          }

          stage("set up environment") {
            steps {
              withCredentials([
                string(
                  credentialsId: 'fff7ef7e-cb20-4fb2-a93b-c5139463c6bf',
                  variable: 'GITHUB_TOKEN',
                )
              ]) {
                sh '''
                  curl -o ${WORKSPACE}/branch-to-python-version.json "https://${GITHUB_TOKEN}@raw.githubusercontent.com/inmanta/irt/master/branch-to-python-version.json"
                '''
              }
              sh '''
                export PYTHON_BINARY=$(irt -v DEBUG get-python-version-for-checkout --map-file ${WORKSPACE}/branch-to-python-version.json --path ${WORKSPACE}/inmanta-core)
                echo "Tests will be run with ${PYTHON_BINARY}"
                rm -rf $INMANTA_TEST_ENV
                ${PYTHON_BINARY} -m venv $INMANTA_TEST_ENV
                $INMANTA_TEST_ENV/bin/python3 -m pip install --upgrade pip setuptools
                $INMANTA_TEST_ENV/bin/python3 -m pip install -r ./inmanta-core/requirements.txt -r ./inmanta-core/requirements.dev.txt
                $INMANTA_TEST_ENV/bin/python3 -m pip install ./inmanta-core ./inmanta-sphinx
                rm -rf inmanta-core/docs/reference/modules
                mkdir inmanta-core/docs/reference/modules
              '''
            }
          }

          stage("test module v1") {
            when {
              environment name: "MODULES_V2", value: "false"
            }
            steps {
              dir("std") {
                deleteDir()
              }
              checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'std']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'inmantaci', url: 'https://github.com/inmanta/std.git']]]

              sh '''
                $INMANTA_TEST_ENV/bin/python3 -m sphinxcontrib.inmanta.api --module_repo $(pwd) --module-name std  --out-dir inmanta-core/docs/reference/modules/
                $INMANTA_TEST_ENV/bin/python3 -m sphinx.cmd.build -vv -T -b html inmanta-core/docs build
              '''
            }
          }

          stage("test module v2") {
            when {
              environment name: "MODULES_V2", value: "true"
            }
            steps {
              dir("std") {
                deleteDir()
              }
              sh '$INMANTA_TEST_ENV/bin/python3 -m pip install inmanta-module-std --pre'

              sh '''
                $INMANTA_TEST_ENV/bin/python3 -m sphinxcontrib.inmanta.api --module_repo $(pwd) --module-name std  --out-dir inmanta-core/docs/reference/modules/
                $INMANTA_TEST_ENV/bin/python3 -m sphinx.cmd.build -vv -T -b html inmanta-core/docs build
              '''
            }
          }
        }
      }
    }
  }
  post{
    cleanup{
      deleteDir()
    }
  }
}
